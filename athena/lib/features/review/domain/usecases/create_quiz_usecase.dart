import 'package:athena/core/errors/failures.dart';
import 'package:athena/features/review/domain/entities/quiz_entity.dart';
import 'package:athena/features/review/domain/entities/quiz_item_entity.dart';
import 'package:athena/features/review/domain/repositories/review_repository.dart';
import 'package:athena/features/review/domain/usecases/params/create_quiz_params.dart';
import 'package:dartz/dartz.dart';

class CreateQuizUseCase {
  final ReviewRepository _repository;

  CreateQuizUseCase(this._repository);

  Future<Either<Failure, QuizEntity>> call(
    CreateQuizParams createQuizParams,
  ) async {
    // Create QuizEntity first
    final quiz = QuizEntity(
      id: '', // ID will be generated by the database
      userId: createQuizParams.userId,
      title: createQuizParams.title,
      quizType: createQuizParams.quizType,
      studyMaterialId: createQuizParams.studyMaterialId,
      subject: createQuizParams.subject,
      description: createQuizParams.description,
      createdAt: DateTime.now(), // Will be overridden by the database
      updatedAt: DateTime.now(), // Will be overridden by the database
    );

    final createdQuizResult = await _repository.createQuiz(quiz);

    return createdQuizResult.fold((failure) => Left(failure), (
      createdQuiz,
    ) async {
      // Create QuizItemEntities after the quiz is created
      for (final itemParams in createQuizParams.quizItems) {
        final quizItem = QuizItemEntity(
          id: '', // ID will be generated by the database
          quizId: createdQuiz.id, // Use the created quiz's ID
          userId: createdQuiz.userId,
          itemType: itemParams.itemType,
          questionText: itemParams.questionText,
          answerText: itemParams.answerText,
          mcqOptions: itemParams.mcqOptions,
          mcqCorrectOptionKey: itemParams.mcqCorrectOptionKey,
          easinessFactor: itemParams.easinessFactor,
          intervalDays: itemParams.intervalDays,
          repetitions: itemParams.repetitions,
          lastReviewedAt: itemParams.lastReviewedAt,
          nextReviewDate: itemParams.nextReviewDate,
          metadata: itemParams.metadata,
          createdAt: DateTime.now(), // Will be overridden by the database
          updatedAt: DateTime.now(), // Will be overridden by the database
        );

        final quizItemResult = await _repository.createQuizItem(quizItem);

        // Check if quiz item creation failed
        if (quizItemResult.isLeft()) {
          return quizItemResult.fold(
            (failure) => Left(failure),
            (_) => Right(createdQuiz),
          );
        }
      }

      return Right(createdQuiz);
    });
  }
}
