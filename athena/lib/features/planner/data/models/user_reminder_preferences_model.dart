import 'package:athena/features/planner/domain/entities/user_reminder_preferences_entity.dart';

class UserReminderPreferencesModel extends UserReminderPreferencesEntity {
  const UserReminderPreferencesModel({
    required super.id,
    required super.userId,
    required super.defaultReminderTemplateIds,
    required super.notificationsEnabled,
    super.quietHoursStart,
    super.quietHoursEnd,
    required super.timezone,
    required super.sessionRemindersEnabled,
    required super.goalRemindersEnabled,
    required super.dailyCheckinsEnabled,
    required super.streakRemindersEnabled,
    required super.createdAt,
    required super.updatedAt,
  });

  factory UserReminderPreferencesModel.fromJson(Map<String, dynamic> json) {
    return UserReminderPreferencesModel(
      id: json['id'] as String,
      userId: json['user_id'] as String,
      defaultReminderTemplateIds:
          (json['default_reminder_template_ids'] as List<dynamic>?)
              ?.map((e) => e as String)
              .toList() ??
          [],
      notificationsEnabled: json['notifications_enabled'] as bool? ?? true,
      quietHoursStart: _parseTimeFromDatabase(json['quiet_hours_start']),
      quietHoursEnd: _parseTimeFromDatabase(json['quiet_hours_end']),
      timezone: json['timezone'] as String,
      sessionRemindersEnabled: json['session_reminders_enabled'] as bool,
      goalRemindersEnabled: json['goal_reminders_enabled'] as bool,
      dailyCheckinsEnabled: json['daily_checkins_enabled'] as bool,
      streakRemindersEnabled: json['streak_reminders_enabled'] as bool,
      createdAt:
          json['created_at'] != null
              ? DateTime.parse(json['created_at'] as String)
              : DateTime.now(),
      updatedAt:
          json['updated_at'] != null
              ? DateTime.parse(json['updated_at'] as String)
              : DateTime.now(),
    );
  }

  /// Helper method to parse time from database (HH:MM:SS) to HH:MM format
  static String? _parseTimeFromDatabase(dynamic timeValue) {
    if (timeValue == null) return null;

    final timeString = timeValue.toString();
    if (timeString.contains(':')) {
      final parts = timeString.split(':');
      if (parts.length >= 2) {
        return '${parts[0]}:${parts[1]}'; // Return just HH:MM
      }
    }
    return timeString;
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'user_id': userId,
      'default_reminder_template_ids': defaultReminderTemplateIds,
      'notifications_enabled': notificationsEnabled,
      'quiet_hours_start': quietHoursStart,
      'quiet_hours_end': quietHoursEnd,
      'timezone': timezone,
      'session_reminders_enabled': sessionRemindersEnabled,
      'goal_reminders_enabled': goalRemindersEnabled,
      'daily_checkins_enabled': dailyCheckinsEnabled,
      'streak_reminders_enabled': streakRemindersEnabled,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
    };
  }

  factory UserReminderPreferencesModel.fromEntity(
    UserReminderPreferencesEntity entity,
  ) {
    return UserReminderPreferencesModel(
      id: entity.id,
      userId: entity.userId,
      defaultReminderTemplateIds: entity.defaultReminderTemplateIds,
      notificationsEnabled: entity.notificationsEnabled,
      quietHoursStart: entity.quietHoursStart,
      quietHoursEnd: entity.quietHoursEnd,
      timezone: entity.timezone,
      sessionRemindersEnabled: entity.sessionRemindersEnabled,
      goalRemindersEnabled: entity.goalRemindersEnabled,
      dailyCheckinsEnabled: entity.dailyCheckinsEnabled,
      streakRemindersEnabled: entity.streakRemindersEnabled,
      createdAt: entity.createdAt,
      updatedAt: entity.updatedAt,
    );
  }

  factory UserReminderPreferencesModel.defaultForUser(String userId) {
    final now = DateTime.now();
    return UserReminderPreferencesModel(
      id: '', // Will be generated by database
      userId: userId,
      defaultReminderTemplateIds: [],
      notificationsEnabled: true,
      quietHoursStart: null,
      quietHoursEnd: null,
      timezone: 'Asia/Kuala_Lumpur',
      sessionRemindersEnabled: true,
      goalRemindersEnabled: true,
      dailyCheckinsEnabled: false,
      streakRemindersEnabled: true,
      createdAt: now,
      updatedAt: now,
    );
  }

  @override
  UserReminderPreferencesModel copyWith({
    String? id,
    String? userId,
    List<String>? defaultReminderTemplateIds,
    bool? notificationsEnabled,
    String? quietHoursStart,
    String? quietHoursEnd,
    String? timezone,
    bool? sessionRemindersEnabled,
    bool? goalRemindersEnabled,
    bool? dailyCheckinsEnabled,
    bool? streakRemindersEnabled,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return UserReminderPreferencesModel(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      defaultReminderTemplateIds:
          defaultReminderTemplateIds ?? this.defaultReminderTemplateIds,
      notificationsEnabled: notificationsEnabled ?? this.notificationsEnabled,
      quietHoursStart: quietHoursStart ?? this.quietHoursStart,
      quietHoursEnd: quietHoursEnd ?? this.quietHoursEnd,
      timezone: timezone ?? this.timezone,
      sessionRemindersEnabled:
          sessionRemindersEnabled ?? this.sessionRemindersEnabled,
      goalRemindersEnabled: goalRemindersEnabled ?? this.goalRemindersEnabled,
      dailyCheckinsEnabled: dailyCheckinsEnabled ?? this.dailyCheckinsEnabled,
      streakRemindersEnabled:
          streakRemindersEnabled ?? this.streakRemindersEnabled,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }
}
