import 'package:athena/core/errors/failures.dart';
import 'package:athena/features/planner/domain/entities/session_reminder_entity.dart';
import 'package:athena/features/planner/domain/repositories/reminder_repository.dart';
import 'package:dartz/dartz.dart';

/// Use case for managing session reminders
class ManageSessionRemindersUseCase {
  final ReminderRepository _repository;

  const ManageSessionRemindersUseCase(this._repository);

  /// Gets all session reminders for a user
  Future<Either<Failure, List<SessionReminderEntity>>> getUserReminders(String userId) {
    return _repository.getSessionReminders(userId);
  }

  /// Gets reminders for a specific session
  Future<Either<Failure, List<SessionReminderEntity>>> getSessionReminders(String sessionId) {
    return _repository.getSessionRemindersBySession(sessionId);
  }

  /// Gets a specific reminder by ID
  Future<Either<Failure, SessionReminderEntity>> getReminderById(String reminderId) {
    return _repository.getSessionReminderById(reminderId);
  }

  /// Creates a new session reminder
  Future<Either<Failure, SessionReminderEntity>> createReminder(SessionReminderEntity reminder) {
    return _repository.createSessionReminder(reminder);
  }

  /// Updates an existing session reminder
  Future<Either<Failure, SessionReminderEntity>> updateReminder(SessionReminderEntity reminder) {
    return _repository.updateSessionReminder(reminder);
  }

  /// Deletes a session reminder
  Future<Either<Failure, void>> deleteReminder(String reminderId) {
    return _repository.deleteSessionReminder(reminderId);
  }

  /// Updates the delivery status of a reminder
  Future<Either<Failure, SessionReminderEntity>> updateDeliveryStatus(
    String reminderId,
    String deliveryStatus,
    {String? errorMessage}
  ) {
    return _repository.updateReminderDeliveryStatus(
      reminderId,
      deliveryStatus,
      errorMessage: errorMessage,
    );
  }

  /// Creates multiple default reminders for a session
  Future<Either<Failure, List<SessionReminderEntity>>> createDefaultRemindersForSession(
    String sessionId,
    String userId,
    List<String> templateIds,
  ) async {
    final List<SessionReminderEntity> createdReminders = [];
    
    for (final templateId in templateIds) {
      final reminder = SessionReminderEntity(
        id: '', // Will be generated by backend
        sessionId: sessionId,
        userId: userId,
        templateId: templateId,
        offsetMinutes: 0, // Will be set by template
        isEnabled: true,
        deliveryStatus: ReminderDeliveryStatus.pending,
      );

      final result = await createReminder(reminder);
      result.fold(
        (failure) => null, // Continue with other reminders even if one fails
        (createdReminder) => createdReminders.add(createdReminder),
      );
    }

    return Right(createdReminders);
  }
} 